name: Build bitshuffle wheels and upload to PyPI

on:
  workflow_dispatch:
  release:
    types:
    - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} and hdf5-${{ matrix.hdf5 }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, macos-13]
        hdf5: ["1.10.7", "1.14.6"]

    steps:
      # Checkout bitshuffle
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Build wheels for all platforms including macOS ARM and Windows
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        with:
          output-dir: ./wheelhouse-hdf5-${{ matrix.hdf5}}
        env:
          CIBW_SKIP: "pp* *musllinux*"          
          # Platform-specific setup commands
          CIBW_BEFORE_ALL_LINUX: |
            chmod +x .github/workflows/install_hdf5.sh
            .github/workflows/install_hdf5.sh ${{ matrix.hdf5 }}
          CIBW_BEFORE_ALL_MACOS: |
            chmod +x .github/workflows/install_hdf5.sh
            .github/workflows/install_hdf5.sh ${{ matrix.hdf5 }}
          CIBW_BEFORE_ALL_WINDOWS: |
            powershell -Command ".github/workflows/install_hdf5.ps1 ${{ matrix.hdf5 }}"
          
          # Platform-specific environment variables
          CIBW_ENVIRONMENT_LINUX: >
            LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
            CPATH=/usr/local/include
            ENABLE_ZSTD=1
          CIBW_ENVIRONMENT_MACOS: >
            DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/lib
            CPATH=/usr/local/include
            ENABLE_ZSTD=1
          CIBW_ENVIRONMENT_WINDOWS: >
            HDF5_DIR=C:/hdf5
            ENABLE_ZSTD=1
          
          CIBW_TEST_REQUIRES: pytest
          # Run units tests but handle platform-specific cases
          CIBW_TEST_COMMAND: pytest {package}/tests
          # Skip tests on platforms where they might fail
          # CIBW_TEST_SKIP: "*macosx* *win*"

      # Package wheels and host on CI
      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse-hdf5-${{ matrix.hdf5 }}/*.whl

  build_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  # # Upload to PyPI
  # upload_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest
  #   # Upload to PyPI on every tag
  #   # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
  #   # Alternatively, to publish when a GitHub Release is created, use the following rule:
  #   if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@v1.5.1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.pypi_password }}
  #         # To test: repository_url: https://test.pypi.org/legacy/
